Line 70 of song_list.html

{% if user.is_authenticated %}
{% if data.pk not in user_song_already_set %}
    <div class="song-add-div">
        <form action="{% url 'song-list' %}" method=POST>
            {% csrf_token %}
            <input 
            type="hidden"
            value="{{ data.pk }}"
            name="song_primary_key"
            >
            <input 
            type="hidden"
            value="{{ user.pk }}"
            name="user_primary_key"
            >
            <input 
            type="submit" 
            value="+" 
            name="submit_add">  
        </form>
    </div>
{% endif %}
{% endif %}

submit_add:$('#submit_add').val(),

#jquery seems to be being ignored rn

# ***create new html file and test on there****

# id for each add sign 
# jquery a function 
# connect jquery to button

$(document).on('submit','#song-list-form-add',function(e){
    $(this).remove();
    e.preventDefault();
        $.ajax({
            type:'POST',
            url:'{% url 'song-list' %}',
            data:{
                song_primary_key:$('#song_primary_key').val(),
                user_primary_key:$('#user_primary_key').val(),
                csrfmiddlewaretoken:$('input[name=csrfmiddlewaretoken]').val(),
            },
        });
});


{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <title>Document</title>
</head>
<body>
    {% block content %}
        <div>Testing Snow Halation</div>
        <form id="post-form" method="POST">
            {% csrf_token %}
            <p>Nam</p><input type="text" name="nam" id="nam"/><br>
            <p>Emai</p><input type="text" name="emai" id="emai"/><br>
            <p>Bi</p><input type="text" name="bi" id="bi"/><br>
            <input type="submit"/>
        </form>
        <script>
            $(document).on('submit', '#post-form', function(e){
                e.preventDefault();
                    $.ajax({
                        type:'POST',
                        url: '{% url 'tested' %}',
                        data:{
                            nam:$('#nam').val(),
                            emai:$('#emai').val(),
                            bi:$('#bi').val(),
                            csrfmiddlewaretoken:$('input[name=csrfmiddlewaretoken]').val(),
                        },
                    });
            });
        </script> 
    {% endblock content %}
</body>
</html>

# song_primary = request.POST.get('song_primary_key') # get pk of song
# user_primary = request.POST.get('user_primary_key') # get user pk
# aotsnippet = AotData.objects.get(pk=int(song_primary)) # find matching song query
# usersnippet = MySongUser.objects.get(pk=int(user_primary)) # find correct user
# usersnippet.my_songs.add(aotsnippet) # add song to user's list of songs
# user_song_list = UserList.objects.all() # list of every song by user
# user_song_already_set = set() # initialize set
# for i in range(len(user_song_list)): 
#     # if the pk of the user song matches current user
#     if user_song_list[i].ProfileUser.pk == int(user_primary):
#         # pk of that song added to set
#         user_song_already_set.add(user_song_list[i].ProfileSong.pk)
# return render(request, 'search/quick_search.html', {
#     'song_primary': song_primary,
#     'user_primary': user_primary,
#     'user_song_already_set': user_song_already_set,
# })

# else: # if user is not authenticated
# total_time = time.time() - start_time # end timer
# total_time = round(total_time, 5) # round timer to 5 decimal places
# return render(request, 'search/quick_search.html', {
#     'searched': searched, # what user inputted
#     'data_query': data_query, # return data query of songs
#     'count': count, # return number of songs
#     'total_time': total_time, # return time taken
# })

u = UserList.objects.all()
u.order_by('ProfileScore')
u.order_by('-ProfileScore')
for i in range(len(u)) (or i in u)
if u[i].ProfileUser.pk == request.user.pk:
maybe create set of tuples
then turn set of tuples into idkidk
sort a tuple somehow or dict
need tuple because could be duplicates
uuuu = set(u.order_by('ProfileScore'))

UserList.objects.filter(ProfileUser = 1)

